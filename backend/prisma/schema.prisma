// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         String   @default("freelancer")
  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt

  Project        Project[]
  Task           Task[]
  Event          Event[]
  Contact        ClientCompany[]
  PartnerCompany PartnerCompany[]
  ClientContact  ClientContact[]
  PartnerContact PartnerContact[]
  File           File[]
}

model ClientCompany {
  id           String   @id @default(uuid())
  name         String
  phoneNumber  Json?
  email        Json?
  taxId        String?
  address      String?
  userId       String
  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  Project       Project[]
  Task          Task[]
  Event         Event[]
  ClientContact ClientContact[]
  File          File[]
  SalesDocument SalesDocument[]
}

model PartnerCompany {
  id           String   @id @default(uuid())
  name         String
  email        String?  @unique
  phoneNumber  String?
  taxId        String?
  address      String?
  userId       String
  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  Project        Project[]
  PartnerContact PartnerContact[]
}

model Project {
  id            String   @id @default(uuid())
  name          String
  brief         String
  projectStatus String
  paymentStatus String
  dateCreated   DateTime @default(now())
  dateModified  DateTime @updatedAt
  userId        String
  clientId      String

  user   User          @relation(fields: [userId], references: [id])
  client ClientCompany @relation(fields: [clientId], references: [id])

  Task             Task[]
  Event            Event[]
  PartnerCompany   PartnerCompany? @relation(fields: [partnerCompanyId], references: [id])
  partnerCompanyId String?
  File             File[]
  SalesDocument    SalesDocument[]
}

model Task {
  id           String   @id @default(uuid())
  name         String
  status       String
  details      String
  link         String
  dueDate      DateTime
  withTime     Boolean
  projectId    String
  clientId     String
  userId       String
  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id])
  client  ClientCompany @relation(fields: [clientId], references: [id])
  project Project       @relation(fields: [projectId], references: [id])
}

model Event {
  id           String   @id @default(uuid())
  name         String
  status       String
  details      String
  link         String
  dueDate      DateTime
  withTime     Boolean
  projectId    String
  clientId     String
  userId       String
  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id])
  client  ClientCompany @relation(fields: [clientId], references: [id])
  project Project       @relation(fields: [projectId], references: [id])
}

model ClientContact {
  id           String   @id @default(uuid())
  name         String
  clientId     String
  userId       String
  type         String
  role         String
  phoneNumber  Json
  email        Json
  details      String
  avatar       String
  dateCreated  DateTime @default(now())
  dateModified DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id])
  client ClientCompany @relation(fields: [clientId], references: [id])
}

model PartnerContact {
  id               String   @id @default(uuid())
  name             String
  partnerCompanyId String
  userId           String
  type             String
  role             String
  phoneNumber      Json
  email            Json
  details          String
  avatar           String
  dateCreated      DateTime @default(now())
  dateModified     DateTime @updatedAt

  user   User           @relation(fields: [userId], references: [id])
  client PartnerCompany @relation(fields: [partnerCompanyId], references: [id])
}

model File {
  id                    String   @id @default(uuid())
  fileName              String
  customName            String
  userId                String
  projectId             String
  clientId              String
  category              String
  link                  String
  size                  String
  permission            Json
  passwordProtected     Boolean
  encryptedPasswordHash String
  dateCreated           DateTime @default(now())
  dateModified          DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id])
  client  ClientCompany @relation(fields: [clientId], references: [id])
  project Project       @relation(fields: [projectId], references: [id])
}

enum DocumentType {
  QUOTATION
  INVOICE
  RECEIPT
}

model SalesDocument {
  id                 String       @id @default(uuid())
  documentNumber     String       @unique
  documentType       DocumentType
  date               DateTime
  currency           String
  projectId          String?
  projectTitle       String
  referenceNumber    String?
  projectDescription String?

  freelancerName  String
  freelancerEmail String
  freelancerPhone String
  freelancerTaxId String?

  clientId      String?
  clientName    String
  clientTaxId   String?
  clientAddress String?
  clientPhone   String
  clientOffice  String?

  subtotal         Float
  discount         Float
  tax              Float
  total            Float
  customAdjustment Float?
  note             String?

  project Project?       @relation(fields: [projectId], references: [id])
  client  ClientCompany? @relation(fields: [clientId], references: [id])

  items     SalesDocumentItem[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model SalesDocumentItem {
  id              String        @id @default(uuid())
  description     String
  rate            Float
  quantity        Int
  amount          Float
  salesDocumentId String
  salesDocument   SalesDocument @relation(fields: [salesDocumentId], references: [id])
}
