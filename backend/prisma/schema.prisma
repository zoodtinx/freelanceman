generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://zoodtinx@localhost:5432/freelanceman_test"
}

model User {
  id               String           @id @default(uuid())
  displayName      String
  password         String
  specialization   String[]
  bio              String?
  role              String          @default("user")
  email            String           @unique
  phoneNumber      String?
  address          String?
  avatar           String?
  pinnedProjects   String[]
  currency         String?
  quitting         Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  authProvider     AuthProvider[]
  clients          Client[]
  clientContacts   ClientContact[]
  events           Event[]
  files            File[]
  partnerContacts  PartnerContact[]
  projects         Project[]
  refreshTokens    RefreshToken?
  salesDocuments   SalesDocument[]
  tasks            Task[]
  partnerCompanies PartnerCompany[] @relation("PartnerCompanyToUser")
}

model AuthProvider {
  id         String @id @default(uuid())
  userId     String
  provider   String
  providerId String
  user       User   @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id             String          @id @default(uuid())
  userId         String
  name           String
  taxId          String          @unique
  email          String
  phoneNumber    String
  address        String
  detail         String
  themeColor     String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  user           User            @relation(fields: [userId], references: [id])
  contacts       ClientContact?
  files          File[]
  projects       Project[]
  salesDocuments SalesDocument[]
}

model ClientContact {
  id          String    @id @default(uuid())
  userId      String
  name        String
  role        String
  phoneNumber String
  email       String
  details     String
  avatar      String
  companyId   String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  company     Client?   @relation(fields: [companyId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model PartnerCompany {
  id          String           @id @default(uuid())
userId      String
  name        String
  taxId       String           @unique
  email       String
  phoneNumber String
  address     String
  detail      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
  contacts    PartnerContact[]
  user        User[]           @relation("PartnerCompanyToUser")
}

model PartnerContact {
  id          String         @id @default(uuid())
  userId      String
  name        String
  companyId   String
  role        String
  phoneNumber String
  email       String
  details     String
  avatar      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  company     PartnerCompany @relation(fields: [companyId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
}

model Project {
  id               String          @id @default(uuid())
  title            String
  clientId         String
  budget           Int
  projectStatus    String
  paymentStatus    String
  links            String[]
  note             String
  userId           String
  pinned           Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  events           Event[]
  files            File[]
  client           Client          @relation(fields: [clientId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  salesDocuments   SalesDocument[]
  tasks            Task[]
}

model Event {
  id        String    @id @default(uuid())
  name      String
  status    String
  details   String
  link      String
  dueAt     DateTime
  projectId String
  userId    String
  tags      String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  project   Project   @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Task {
  id        String    @id @default(uuid())
  name      String
  status    String
  details   String
  link      String
  dueAt     DateTime
  projectId String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  project   Project   @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model File {
  id           String    @id @default(uuid())
  originalName String
  displayName  String
  type         String
  category     String
  link         String
  projectId    String?
  clientId     String?
  userId       String
  size         Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  client       Client?   @relation(fields: [clientId], references: [id])
  project      Project?  @relation(fields: [projectId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
}

model SalesDocument {
  id                      String                @id @default(uuid())
  userId                  String
  title                   String
  category                SalesDocumentCategory
  number                  String                @unique
  issuedAt                DateTime
  currency                String
  projectId               String
  referenceNumber         String
  projectDescription      String
  selectedProjectClientId String
  freelancerName          String
  freelancerEmail         String
  freelancerPhone         String
  freelancerTaxId         String
  freelancerDetail        String?
  clientId                String
  clientName              String
  clientTaxId             String
  clientAddress           String?
  clientPhone             String?
  clientOffice            String?
  clientDetail            String?
  subtotal                Float
  discount                Float?
  tax                     Float
  total                   Float
  customAdjustment        Float?
  note                    String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  client                  Client                @relation(fields: [clientId], references: [id])
  project                 Project               @relation(fields: [projectId], references: [id])
  user                    User                  @relation(fields: [userId], references: [id])
  items                   SalesDocumentItem[]
}

model SalesDocumentItem {
  id              String        @id @default(uuid())
  title           String
  description     String?
  rate            Float
  quantity        Int
  salesDocumentId String
  salesDoc        SalesDocument @relation(fields: [salesDocumentId], references: [id])
}

enum SalesDocumentCategory {
  QUOTATION
  INVOICE
  RECEIPT
}
