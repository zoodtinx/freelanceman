generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://zoodtinx@localhost:5432/freelanceman_test"
}

model User {
  id                 String              @id @default(uuid())
  isDemo             Boolean             @default(false)
  isFirstTimeVisitor Boolean             @default(false)
  displayName        String
  email              String              @unique
  password           String?
  specialization     String[]            @default([])
  bio                String?
  role               String              @default("user")
  phoneNumber        String?
  address            String?
  avatar             String?
  pinnedProjects     String[]
  currency           String              @default("THB")
  taxId              String?
  quitting           Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  authProvider       AuthProvider[]
  clients            Client[]
  clientContacts     ClientContact[]
  events             Event[]
  files              File[]
  partnerContacts    PartnerContact[]
  projects           Project[]
  refreshTokens      RefreshToken?
  salesDocuments     SalesDocument[]
  tasks              Task[]
  partnerCompanies   PartnerCompany[]
  salesDocumentItem  SalesDocumentItem[]
    visitingStatus     VisitingStatus? 
}

model VisitingStatus {
  id                  String  @id @default(uuid())
  userId              String  @unique
  homePage            Boolean @default(false)
  actionsPage         Boolean @default(false)
  allClientsPage      Boolean @default(false)
  partnersPage        Boolean @default(false)
  incomePage          Boolean @default(false)
  filesPage           Boolean @default(false)
  projectPage         Boolean @default(false)
  documentBuilderPage Boolean @default(false)
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model AuthProvider {
  id       String @id @default(uuid())
  userId   String
  provider String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String    @unique
  expiresAt DateTime
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Client {
  id             String          @id @default(uuid())
  userId         String
  name           String
  taxId          String?
  email          String?
  phoneNumber    String?
  address        String?
  detail         String?
  themeColor     String
  note           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts       ClientContact[]
  files          File[]
  task           Task[]
  event          Event[]
  projects       Project[]
  salesDocuments SalesDocument[]
}

model ClientContact {
  id          String                   @id @default(uuid())
  userId      String
  name        String
  role        String?
  phoneNumber String?
  email       String?
  details     String?
  avatar      String?
  companyId   String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime?                @updatedAt
  company     Client?                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects    ClientContactOnProject[]
}

model PartnerCompany {
  id          String    @id @default(uuid())
  userId      String
  name        String
  taxId       String?
  email       String?
  phoneNumber String?
  address     String?
  detail      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PartnerContact {
  id          String                    @id @default(uuid())
  userId      String
  name        String
  company     String?
  role        String?
  phoneNumber String?
  email       String?
  details     String?
  avatar      String?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects    PartnerContactOnProject[]
}

model Project {
  id              String                    @id @default(uuid())
  name           String
  clientId        String?
  budget          Int
  projectStatus   String
  paymentStatus   String
  note            String?
  userId          String
  pinned          Boolean                   @default(false)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  events          Event[]
  files           File[]
  client          Client?                   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user            User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  salesDocuments  SalesDocument[]
  tasks           Task[]
  links           Link[]
  clientContacts  ClientContactOnProject[]
  partnerContacts PartnerContactOnProject[]
}

model ClientContactOnProject {
  projectId       String
  clientContactId String
  project         Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  clientContact   ClientContact @relation(fields: [clientContactId], references: [id], onDelete: Cascade)

  @@id([projectId, clientContactId])
}

model PartnerContactOnProject {
  projectId        String
  partnerContactId String
  project          Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  partnerContact   PartnerContact @relation(fields: [partnerContactId], references: [id], onDelete: Cascade)

  @@id([projectId, partnerContactId]) // Composite primary key
}

model Event {
  id         String    @id @default(uuid())
  name       String
  details    String?
  link       String?
  dueAt      DateTime
  projectId  String?
  clientId   String?
  userId     String
  tags       String[]
  isWithTime Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  client     Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id         String    @id @default(uuid())
  name       String
  status     String
  details    String?
  link       String?
  dueAt      DateTime
  projectId  String?
  clientId   String?
  userId     String
  isWithTime Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  client     Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id           String    @id @default(uuid())
  originalName String?
  name          String
  type         String
  category     String
  link         String?
  s3Key        String?
  url          String?
  projectId    String?
  clientId     String?
  userId       String
  size         Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  client       Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project      Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SalesDocument {
  id                 String              @id @default(uuid())
  userId             String
  title              String?
  category           String
  number             String?
  issuedAt           DateTime
  currency           String?             @default("THB")
  projectId          String
  referenceNumber    String?
  projectTitle       String?
  projectDescription String?
  freelancerName     String
  freelancerEmail    String?
  freelancerPhone    String?
  freelancerTaxId    String?
  freelancerAddress  String?
  clientId           String
  clientName         String
  clientTaxId        String?
  clientAddress      String?
  clientPhone        String?
  clientOffice       String?
  clientDetail       String?
  discount           Float?
  tax                Float?
  discountPercent    Float?
  discountFlat       Float?
  total              Float?
  note               String?
  s3Key            String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  client             Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project            Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  items              SalesDocumentItem[]
}

model SalesDocumentItem {
  id               String        @id @default(uuid())
  userId           String
  title            String
  description      String?
  rate             Float
  quantity         Int
  parentDocumentId String
  parentDocument   SalesDocument @relation(fields: [parentDocumentId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SalesDocumentCategory {
  QUOTATION
  INVOICE
  RECEIPT
}

model Link {
  id        String  @id @default(uuid())
  projectId String
  label     String
  url       String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}





